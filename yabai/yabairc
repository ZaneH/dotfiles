#!/usr/bin/env bash

set -x

# ====== Variables =============================

declare -A gaps
declare -A color

gaps["top"]="24"
gaps["bottom"]="0"
gaps["left"]="0"
gaps["right"]="0"
gaps["inner"]="0"

color["focused"]="0xE0808080"
color["normal"]="0x00010101"
color["preselect"]="0xE02d74da"

# ===== Loading Scripting Additions ============

# See: https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release)#macos-big-sur---automatically-load-scripting-addition-on-startup
sudo yabai --load-sa
yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"

# ===== Tiling setting =========================

yabai -m config layout                      bsp

# Let Space 1 be normal
yabai -m config --space 1 layout float

yabai -m config top_padding 8 #                  "${gaps["top"]}"
yabai -m config bottom_padding 8 #               "${gaps["bottom"]}"
yabai -m config left_padding 16 #                "${gaps["left"]}"
yabai -m config right_padding 16 #               "${gaps["right"]}"
yabai -m config window_gap 8 #                   "${gaps["inner"]}"

yabai -m config mouse_follows_focus         off
yabai -m config focus_follows_mouse         off 

yabai -m config window_topmost              off
yabai -m config window_opacity              off
yabai -m config window_shadow               on

yabai -m config window_border               off
yabai -m config window_border_width         2
yabai -m config active_window_border_color  "${color["focused"]}"
yabai -m config normal_window_border_color  "${color["normal"]}"
yabai -m config insert_feedback_color       "${color["preselect"]}"

yabai -m config active_window_opacity       1.0
yabai -m config normal_window_opacity       1.0
yabai -m config split_ratio                 0.50

yabai -m config auto_balance                off

yabai -m config mouse_modifier              fn
yabai -m config mouse_action1               move
yabai -m config mouse_action2               resize

# ===== Rules ==================================

# First Party apps
# yabai -m rule --add label="Finder" app="^Finder$" title="(Co(py|nnect)|Move|Info|Pref)" manage=off
yabai -m rule --add app="^Notes$" manage=off
yabai -m rule --add app="^Finder$" manage=off
yabai -m rule --add app="^Messages$" manage=off 
yabai -m rule --add label="Safari" app="^Safari$" title="^(General|(Tab|Password|Website|Extension)s|AutoFill|Se(arch|curity)|Privacy|Advance)$" manage=off
yabai -m rule --add label="System Preferences" app="^System Preferences$" title=".*" manage=off
yabai -m rule --add label="Archive Utility" app="^Archive Utility$" manage=off
yabai -m rule --add label="Projucer" app="^Projucer$" manage=off
yabai -m rule --add label="App Store" app="^App Store$" manage=off
yabai -m rule --add label="Activity Monitor" app="^Activity Monitor$" manage=off
yabai -m rule --add label="Calculator" app="^Calculator$" manage=off
yabai -m rule --add label="Dictionary" app="^Dictionary$" manage=off
yabai -m rule --add label="Software Update" title="Software Update" manage=off
yabai -m rule --add label="About This Mac" app="System Information" title="About This Mac" manage=off
yabai -m rule --add app="^Digital Colou?r Meter$" sticky=on layer=above manage=off
yabai -m rule --add app="^Preview$" manage=off

# 3rd Party apps
yabai -m rule --add app="^Notion$" manage=off
yabai -m rule --add app="^Unity Hub$" manage=off
yabai -m rule --add app="^Shottr$" manage=off
yabai -m rule --add app="^Private Internet Access$" manage=off
yabai -m rule --add app="^Steam$" manage=off
yabai -m rule --add app="^Calendar$" manage=off

# ===== Signals ================================

# yabai -m signal --add event=application_front_switched action="${ubersicht_spaces_refresh_command}"
# yabai -m signal --add event=display_changed action="${ubersicht_spaces_refresh_command}"
# yabai -m signal --add event=space_changed action="${ubersicht_spaces_refresh_command}"
# yabai -m signal --add event=window_created action="${ubersicht_spaces_refresh_command}"
# yabai -m signal --add event=window_destroyed action="${ubersicht_spaces_refresh_command}"
# yabai -m signal --add event=window_focused action="${ubersicht_spaces_refresh_command}"
# yabai -m signal --add event=window_title_changed action="${ubersicht_spaces_refresh_command}"

# focus window after active space changes
yabai -m signal --add event=space_changed action="yabai -m window --focus \$(yabai -m query --windows --space | jq .[0].id)"

# focus window after active display changes
yabai -m signal --add event=display_changed action="yabai -m window --focus \$(yabai -m query --windows --space | jq .[0].id)"

# This is unmaintainable but it works...maybe I'll think of a better solution
# yabai -m signal --add event=window_destroyed action="yabai -m query --windows --window &> /dev/null || yabai -m window --focus recent || yabai -m window --focus first" app="^(Messages|Brave Browser)$"

set +x
printf "yabai: configuration loaded...\\n"
# yabai -m config debug_output	on
